{"version":3,"sources":["components/Item/Item.module.css","components/Cockpit/Cockpit.module.css","components/Item/Item.js","components/List/List.js","components/Cockpit/Cockpit.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","item","userItem","this","props","editstate","onSubmit","edittoggle","itemid","className","classes","EditForm","type","onChange","e","change","EditInput","value","text","itemcomplete","Completed","Item","CompleteBtnActive","CompleteBtn","onClick","complete","ItemTextContainer","BtnRightContainer","EditActive","EditBtn","RemoveBtn","delete","Component","list","items","map","key","id","editing","cockpit","submit","Form","Input","placeholder","SubmitBtn","App","state","listHasItems","textChangeHandler","event","tempText","target","setState","editChangeHandler","itemIndex","findIndex","tempList","removeItemHandler","window","localStorage","setItem","JSON","stringify","addItemHandler","preventDefault","newItem","Date","now","push","splice","completeItemHandler","itemIsEditing","documentData","parse","getItem","List","Cockpit","check","maxCharCheck","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.69043cb4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Item\":\"Item_Item__14ZD6\",\"UserText\":\"Item_UserText__2i152\",\"ItemTextContainer\":\"Item_ItemTextContainer__vkui_\",\"Completed\":\"Item_Completed__6uZRs\",\"CompleteBtn\":\"Item_CompleteBtn__2YFLl\",\"CompleteBtnActive\":\"Item_CompleteBtnActive__1wmcJ\",\"RemoveBtn\":\"Item_RemoveBtn__QLLNa\",\"EditBtn\":\"Item_EditBtn__TCRn9\",\"EditForm\":\"Item_EditForm__P7g_6\",\"EditInput\":\"Item_EditInput__1O3HA\",\"EditActive\":\"Item_EditActive__3IJhQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"Cockpit_Form__nvEKZ\",\"Input\":\"Cockpit_Input__1JQ7x\",\"SubmitBtn\":\"Cockpit_SubmitBtn__3QXVY\"};","import React, { Component } from 'react';\r\nimport classes from './Item.module.css';\r\n\r\nclass item extends Component {\r\n    render() {  \r\n            let userItem;\r\n\r\n            if (this.props.editstate){\r\n                userItem = <form onSubmit={() => this.props.edittoggle(this.props.itemid)} className={classes.EditForm}>\r\n                                <input \r\n                                    type=\"text\" \r\n                                    onChange={(e) => this.props.change(e, this.props.itemid)}\r\n                                    className={classes.EditInput}\r\n                                    value={this.props.text}\r\n                                    />\r\n                            </form>\r\n                   \r\n            } else {\r\n                userItem = \r\n                    <p className={this.props.itemcomplete ? classes.Completed : null }>\r\n                        {this.props.text}\r\n                    </p>\r\n            }\r\n        \r\n            return (\r\n            <li className={classes.Item}>\r\n                    <button className={this.props.itemcomplete ? classes.CompleteBtnActive : classes.CompleteBtn} \r\n                       onClick={() => this.props.complete(this.props.itemid)}>&#10003;</button>\r\n                <span className={classes.ItemTextContainer}>\r\n                    {userItem}\r\n                </span>\r\n                <span className={classes.BtnRightContainer}>\r\n                    \r\n                    <button className={this.props.editstate ? classes.EditActive : classes.EditBtn} \r\n                       onClick={() => this.props.edittoggle(this.props.itemid)}>&#x270E;</button>\r\n                    <button className={classes.RemoveBtn} \r\n                       onClick={() => this.props.delete(this.props.itemid)}>X</button>\r\n                </span>\r\n            </li>      \r\n        );\r\n    }\r\n}\r\n\r\nexport default item;","import React from 'react';\r\nimport Item from '../Item/Item';\r\nimport classes from './List.module.css';\r\n\r\nconst list = (props) => {\r\n    return (props.items.map((item) => {\r\n        return (\r\n            <Item className={classes}\r\n                key={item.id}\r\n                itemid={item.id}\r\n                itemcomplete={item.complete}\r\n                editstate={item.editing}\r\n                text={item.text}\r\n                value={props.value}\r\n                change={props.change}\r\n                edittoggle={() => props.edittoggle(item.id)}\r\n                delete={() => props.delete(item.id)}\r\n                complete={() => props.complete(item.id)}\r\n                />\r\n            )})\r\n    )\r\n}\r\n\r\nexport default list;\r\n","import React, { Fragment } from 'react';\r\n\r\nimport classes from './Cockpit.module.css';\r\n\r\nconst cockpit = (props) => {\r\n    return(\r\n        <Fragment>\r\n            <h1>To Do List</h1>\r\n            <form onSubmit={props.submit} className={classes.Form}>\r\n                <input onChange={props.change} \r\n                    className={classes.Input}\r\n                    placeholder=\"Enter a to-do...\"\r\n                    value={props.value}\r\n                    />\r\n                <button type=\"submit\" onSubmit={props.submit} className={classes.SubmitBtn}>Submit</button>\r\n            </form>\r\n        </Fragment>  \r\n    )\r\n}\r\n\r\nexport default cockpit;","import React, { Component } from 'react';\nimport List from '../components/List/List'\nimport Cockpit from '../components/Cockpit/Cockpit' \nimport './App.css';\n\nclass App extends Component {\n  state = {\n    items: [],\n    text: '',\n    listHasItems: false,\n  }\n\n  textChangeHandler = (event) => {\n    // Mutate and store the temp text\n      const tempText = event.target.value;\n    \n    // Update the text state\n      this.setState({text: tempText});\n  }\n\n  editChangeHandler = (event, id) => {\n    // Find the index of the item by the id\n      const itemIndex = this.state.items.findIndex(item => {\n        return item.id === id;\n      });\n    \n    // Get the item inside of the list\n      const item = {\n        ...this.state.items[itemIndex]\n      };\n      \n    // Mutate and store the temp text\n      const tempText = event.target.value;\n\n    // This items text  is equal to what is being typed into the edit input field\n      item.text = tempText;\n      \n    // Get the list\n      const tempList = [...this.state.items];\n    \n    // Set the item in the list\n      tempList[itemIndex] = item;\n\n    // If there is no value anymore, (user backspaces everything, then delete the todo)\n      if (event.target.value === '')\n        return this.removeItemHandler();\n\n    // Update your list\n      this.setState({items: tempList, text: ''}); \n\n    // Update on localstorage\n      window.localStorage.setItem('items', JSON.stringify(tempList));\n  }\n\n\n  addItemHandler = (e) => {\n    e.preventDefault();\n    // If there is no text value, return, do not add empty items.\n      if (this.state.text === ''){\n        return;\n      }\n    // Create a new item\n      const newItem = {text: this.state.text, id: Date.now(), complete: false, editing: false};\n    \n    // Copy the current items for mutation\n      const tempList = [...this.state.items];\n    \n    // Add mutated item to the array\n      tempList.push(newItem);\n    \n    // Update the state, clear the text\n      this.setState({items: tempList, text: '', listHasItems: true}); \n    \n    // Update on localstorage\n      window.localStorage.setItem('items', JSON.stringify(tempList));\n    }\n\n  removeItemHandler = (id) => {\n    // Find the index of the item by the id\n      const itemIndex = this.state.items.findIndex(item => {\n        return item.id === id;\n      });\n    \n    // Create a list reference to be mutated\n      const tempList = [...this.state.items];\n    \n    // Remove the item from the list at the id\n      tempList.splice(itemIndex, 1);\n      \n    // Update your list, reset the items state\n      this.setState({items: tempList});\n    \n    // Save to localStorage\n      window.localStorage.setItem('items', JSON.stringify(tempList));\n  }\n\n  completeItemHandler = (id) => {\n    // Find the index of the item by the id\n      const itemIndex = this.state.items.findIndex(item => {\n        return item.id === id;\n      });\n\n    // Get the item inside of the list\n      const item = {\n        ...this.state.items[itemIndex]\n      };\n    \n    // Switch between complete and not complete\n      item.complete = !item.complete;\n    \n    // Get the list\n      const tempList = [...this.state.items];\n    \n    // Set the item in the list\n      tempList[itemIndex] = item;\n    \n    // Update your list\n      this.setState({items: tempList});      \n    \n    // Update the localstorage\n      window.localStorage.setItem('items', JSON.stringify(tempList));\n  }\n\n  itemIsEditing = (id) => {\n    // Find the index of the item by the id\n      const itemIndex = this.state.items.findIndex(item => {\n        return item.id === id;\n      });\n    \n    // Get the item inside of the list\n      const item = {\n        ...this.state.items[itemIndex]\n      };\n\n    // Item is currently edit toggle, true or false, on or off\n      item.editing = !item.editing;\n  \n    // Get the list\n      const tempList = [...this.state.items];\n    \n    // Set the item in the list\n      tempList[itemIndex] = item;\n        \n    // Update your list\n      this.setState({items: tempList}); \n    \n    // Update on localstorage\n      window.localStorage.setItem('items', JSON.stringify(tempList));\n  }\n\n  componentDidMount() {\n    // If there are items set them to get and set them to this variable\n      this.documentData = JSON.parse(localStorage.getItem('items'));\n\n    // Update list with localstorage data\n      if (localStorage.getItem('items')) {\n          this.setState({\n          items: this.documentData,\n          listHasItems: true, }); \n      }\n  }\n\n  render(){\n    // If no lists exists, render nothing.\n      let list = null;\n\n    // If a list does exist or is created. Render that component.\n      if (this.state.listHasItems) {\n        list = (\n          <ul>\n              <List \n                items={this.state.items}\n                text={this.state.text} \n                delete={this.removeItemHandler}\n                edittoggle={this.itemIsEditing}\n                change={this.editChangeHandler}\n                complete={this.completeItemHandler}\n                />\n          </ul>)\n      }\n    return (\n      <div className=\"App\">\n        <Cockpit\n          submit={this.addItemHandler}\n          change={this.textChangeHandler}\n          value={this.state.text}  \n          check={this.maxCharCheck}\n          />\n        {list} \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}